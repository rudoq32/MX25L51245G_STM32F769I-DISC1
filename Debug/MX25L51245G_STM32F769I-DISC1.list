
MX25L51245G_STM32F769I-DISC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d8c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001f84  08001f84  00011f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f94  08001f94  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001f94  08001f94  00011f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f9c  08001f9c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f9c  08001f9c  00011f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fa0  08001fa0  00011fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08001fb0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001fb0  00020078  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007d9b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016ee  00000000  00000000  00027dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006d0  00000000  00000000  000294c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005f8  00000000  00000000  00029b98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ac2f  00000000  00000000  0002a190  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006c72  00000000  00000000  00054dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00101f8b  00000000  00000000  0005ba31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015d9bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000019b8  00000000  00000000  0015da38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08001f6c 	.word	0x08001f6c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08001f6c 	.word	0x08001f6c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f929 	bl	8000794 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f001 fc28 	bl	8001d9c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 f943 	bl	80007fe <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295
 8000590:	f000 f90b 	bl	80007aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000028 	.word	0x20000028

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000028 	.word	0x20000028

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 800061e:	4313      	orrs	r3, r2
 8000620:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000622:	4a04      	ldr	r2, [pc, #16]	; (8000634 <__NVIC_SetPriorityGrouping+0x40>)
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	60d3      	str	r3, [r2, #12]
}
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	e000ed00 	.word	0xe000ed00
 8000638:	05fa0000 	.word	0x05fa0000

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4907      	ldr	r1, [pc, #28]	; (8000690 <__NVIC_EnableIRQ+0x38>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000e100 	.word	0xe000e100

08000694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	6039      	str	r1, [r7, #0]
 800069e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	db0a      	blt.n	80006be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	b2da      	uxtb	r2, r3
 80006ac:	490c      	ldr	r1, [pc, #48]	; (80006e0 <__NVIC_SetPriority+0x4c>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	0112      	lsls	r2, r2, #4
 80006b4:	b2d2      	uxtb	r2, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006bc:	e00a      	b.n	80006d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	4908      	ldr	r1, [pc, #32]	; (80006e4 <__NVIC_SetPriority+0x50>)
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	3b04      	subs	r3, #4
 80006cc:	0112      	lsls	r2, r2, #4
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	440b      	add	r3, r1
 80006d2:	761a      	strb	r2, [r3, #24]
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	e000e100 	.word	0xe000e100
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b089      	sub	sp, #36	; 0x24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006fc:	69fb      	ldr	r3, [r7, #28]
 80006fe:	f1c3 0307 	rsb	r3, r3, #7
 8000702:	2b04      	cmp	r3, #4
 8000704:	bf28      	it	cs
 8000706:	2304      	movcs	r3, #4
 8000708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	3304      	adds	r3, #4
 800070e:	2b06      	cmp	r3, #6
 8000710:	d902      	bls.n	8000718 <NVIC_EncodePriority+0x30>
 8000712:	69fb      	ldr	r3, [r7, #28]
 8000714:	3b03      	subs	r3, #3
 8000716:	e000      	b.n	800071a <NVIC_EncodePriority+0x32>
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800071c:	f04f 32ff 	mov.w	r2, #4294967295
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	43da      	mvns	r2, r3
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	401a      	ands	r2, r3
 800072c:	697b      	ldr	r3, [r7, #20]
 800072e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000730:	f04f 31ff 	mov.w	r1, #4294967295
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43d9      	mvns	r1, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000740:	4313      	orrs	r3, r2
         );
}
 8000742:	4618      	mov	r0, r3
 8000744:	3724      	adds	r7, #36	; 0x24
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3b01      	subs	r3, #1
 800075c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000760:	d301      	bcc.n	8000766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000762:	2301      	movs	r3, #1
 8000764:	e00f      	b.n	8000786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <SysTick_Config+0x40>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	3b01      	subs	r3, #1
 800076c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800076e:	210f      	movs	r1, #15
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	f7ff ff8e 	bl	8000694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <SysTick_Config+0x40>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800077e:	4b04      	ldr	r3, [pc, #16]	; (8000790 <SysTick_Config+0x40>)
 8000780:	2207      	movs	r2, #7
 8000782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	e000e010 	.word	0xe000e010

08000794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff ff29 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b086      	sub	sp, #24
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	60b9      	str	r1, [r7, #8]
 80007b4:	607a      	str	r2, [r7, #4]
 80007b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007bc:	f7ff ff3e 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	68b9      	ldr	r1, [r7, #8]
 80007c6:	6978      	ldr	r0, [r7, #20]
 80007c8:	f7ff ff8e 	bl	80006e8 <NVIC_EncodePriority>
 80007cc:	4602      	mov	r2, r0
 80007ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f7ff ff5d 	bl	8000694 <__NVIC_SetPriority>
}
 80007da:	bf00      	nop
 80007dc:	3718      	adds	r7, #24
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff31 	bl	8000658 <__NVIC_EnableIRQ>
}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}

080007fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007fe:	b580      	push	{r7, lr}
 8000800:	b082      	sub	sp, #8
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff ffa2 	bl	8000750 <SysTick_Config>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000816:	b480      	push	{r7}
 8000818:	b083      	sub	sp, #12
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000824:	b2db      	uxtb	r3, r3
 8000826:	2b02      	cmp	r3, #2
 8000828:	d004      	beq.n	8000834 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000830:	2301      	movs	r3, #1
 8000832:	e00c      	b.n	800084e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	2205      	movs	r2, #5
 8000838:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f022 0201 	bic.w	r2, r2, #1
 800084a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800084c:	2300      	movs	r3, #0
}
 800084e:	4618      	mov	r0, r3
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr
	...

0800085c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800085c:	b480      	push	{r7}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000876:	2300      	movs	r3, #0
 8000878:	61fb      	str	r3, [r7, #28]
 800087a:	e175      	b.n	8000b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800087c:	2201      	movs	r2, #1
 800087e:	69fb      	ldr	r3, [r7, #28]
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	697a      	ldr	r2, [r7, #20]
 800088c:	4013      	ands	r3, r2
 800088e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	429a      	cmp	r2, r3
 8000896:	f040 8164 	bne.w	8000b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b02      	cmp	r3, #2
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0x4e>
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b12      	cmp	r3, #18
 80008a8:	d123      	bne.n	80008f2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80008aa:	69fb      	ldr	r3, [r7, #28]
 80008ac:	08da      	lsrs	r2, r3, #3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3208      	adds	r2, #8
 80008b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f003 0307 	and.w	r3, r3, #7
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	220f      	movs	r2, #15
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691a      	ldr	r2, [r3, #16]
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	f003 0307 	and.w	r3, r3, #7
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008e4:	69fb      	ldr	r3, [r7, #28]
 80008e6:	08da      	lsrs	r2, r3, #3
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	3208      	adds	r2, #8
 80008ec:	69b9      	ldr	r1, [r7, #24]
 80008ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	2203      	movs	r2, #3
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	4013      	ands	r3, r2
 8000908:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	f003 0203 	and.w	r2, r3, #3
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	4313      	orrs	r3, r2
 800091e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	69ba      	ldr	r2, [r7, #24]
 8000924:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d00b      	beq.n	8000946 <HAL_GPIO_Init+0xea>
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d007      	beq.n	8000946 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800093a:	2b11      	cmp	r3, #17
 800093c:	d003      	beq.n	8000946 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2b12      	cmp	r3, #18
 8000944:	d130      	bne.n	80009a8 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689b      	ldr	r3, [r3, #8]
 800094a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	005b      	lsls	r3, r3, #1
 8000950:	2203      	movs	r2, #3
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	69ba      	ldr	r2, [r7, #24]
 800095a:	4013      	ands	r3, r2
 800095c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	68da      	ldr	r2, [r3, #12]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	4313      	orrs	r3, r2
 800096e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800097c:	2201      	movs	r2, #1
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	fa02 f303 	lsl.w	r3, r2, r3
 8000984:	43db      	mvns	r3, r3
 8000986:	69ba      	ldr	r2, [r7, #24]
 8000988:	4013      	ands	r3, r2
 800098a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	091b      	lsrs	r3, r3, #4
 8000992:	f003 0201 	and.w	r2, r3, #1
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4313      	orrs	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	69ba      	ldr	r2, [r7, #24]
 80009a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	2203      	movs	r2, #3
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	69ba      	ldr	r2, [r7, #24]
 80009bc:	4013      	ands	r3, r2
 80009be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	689a      	ldr	r2, [r3, #8]
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	685b      	ldr	r3, [r3, #4]
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	f000 80be 	beq.w	8000b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e6:	4b65      	ldr	r3, [pc, #404]	; (8000b7c <HAL_GPIO_Init+0x320>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a64      	ldr	r2, [pc, #400]	; (8000b7c <HAL_GPIO_Init+0x320>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b62      	ldr	r3, [pc, #392]	; (8000b7c <HAL_GPIO_Init+0x320>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009fe:	4a60      	ldr	r2, [pc, #384]	; (8000b80 <HAL_GPIO_Init+0x324>)
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	089b      	lsrs	r3, r3, #2
 8000a04:	3302      	adds	r3, #2
 8000a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	220f      	movs	r2, #15
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	69ba      	ldr	r2, [r7, #24]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a57      	ldr	r2, [pc, #348]	; (8000b84 <HAL_GPIO_Init+0x328>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d037      	beq.n	8000a9a <HAL_GPIO_Init+0x23e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a56      	ldr	r2, [pc, #344]	; (8000b88 <HAL_GPIO_Init+0x32c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d031      	beq.n	8000a96 <HAL_GPIO_Init+0x23a>
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <HAL_GPIO_Init+0x330>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d02b      	beq.n	8000a92 <HAL_GPIO_Init+0x236>
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a54      	ldr	r2, [pc, #336]	; (8000b90 <HAL_GPIO_Init+0x334>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d025      	beq.n	8000a8e <HAL_GPIO_Init+0x232>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a53      	ldr	r2, [pc, #332]	; (8000b94 <HAL_GPIO_Init+0x338>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d01f      	beq.n	8000a8a <HAL_GPIO_Init+0x22e>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a52      	ldr	r2, [pc, #328]	; (8000b98 <HAL_GPIO_Init+0x33c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d019      	beq.n	8000a86 <HAL_GPIO_Init+0x22a>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <HAL_GPIO_Init+0x340>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d013      	beq.n	8000a82 <HAL_GPIO_Init+0x226>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a50      	ldr	r2, [pc, #320]	; (8000ba0 <HAL_GPIO_Init+0x344>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d00d      	beq.n	8000a7e <HAL_GPIO_Init+0x222>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4a4f      	ldr	r2, [pc, #316]	; (8000ba4 <HAL_GPIO_Init+0x348>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d007      	beq.n	8000a7a <HAL_GPIO_Init+0x21e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a4e      	ldr	r2, [pc, #312]	; (8000ba8 <HAL_GPIO_Init+0x34c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d101      	bne.n	8000a76 <HAL_GPIO_Init+0x21a>
 8000a72:	2309      	movs	r3, #9
 8000a74:	e012      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a76:	230a      	movs	r3, #10
 8000a78:	e010      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	e00e      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a7e:	2307      	movs	r3, #7
 8000a80:	e00c      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a82:	2306      	movs	r3, #6
 8000a84:	e00a      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a86:	2305      	movs	r3, #5
 8000a88:	e008      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x240>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000aac:	4934      	ldr	r1, [pc, #208]	; (8000b80 <HAL_GPIO_Init+0x324>)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ade:	4a33      	ldr	r2, [pc, #204]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae4:	4b31      	ldr	r3, [pc, #196]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b08:	4a28      	ldr	r2, [pc, #160]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b27      	ldr	r3, [pc, #156]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b32:	4a1e      	ldr	r2, [pc, #120]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b38:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_GPIO_Init+0x350>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	f67f ae86 	bls.w	800087c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40021400 	.word	0x40021400
 8000b9c:	40021800 	.word	0x40021800
 8000ba0:	40021c00 	.word	0x40021c00
 8000ba4:	40022000 	.word	0x40022000
 8000ba8:	40022400 	.word	0x40022400
 8000bac:	40013c00 	.word	0x40013c00

08000bb0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	4a22      	ldr	r2, [pc, #136]	; (8000c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc6:	4b20      	ldr	r3, [pc, #128]	; (8000c48 <HAL_PWREx_EnableOverDrive+0x98>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bdc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bde:	f7ff fcfd 	bl	80005dc <HAL_GetTick>
 8000be2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000be4:	e009      	b.n	8000bfa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000be6:	f7ff fcf9 	bl	80005dc <HAL_GetTick>
 8000bea:	4602      	mov	r2, r0
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bf4:	d901      	bls.n	8000bfa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e022      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bfa:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c06:	d1ee      	bne.n	8000be6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c12:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c14:	f7ff fce2 	bl	80005dc <HAL_GetTick>
 8000c18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c1a:	e009      	b.n	8000c30 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c1c:	f7ff fcde 	bl	80005dc <HAL_GetTick>
 8000c20:	4602      	mov	r2, r0
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c2a:	d901      	bls.n	8000c30 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	e007      	b.n	8000c40 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c3c:	d1ee      	bne.n	8000c1c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	40023800 	.word	0x40023800
 8000c4c:	40007000 	.word	0x40007000

08000c50 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af02      	add	r7, sp, #8
 8000c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff fcbe 	bl	80005dc <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e073      	b.n	8000d54 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d101      	bne.n	8000c7c <HAL_QSPI_Init+0x2c>
 8000c78:	2302      	movs	r3, #2
 8000c7a:	e06b      	b.n	8000d54 <HAL_QSPI_Init+0x104>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d10b      	bne.n	8000ca8 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2200      	movs	r2, #0
 8000c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f000 ffd7 	bl	8001c4c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8000c9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f000 fa5a 	bl	800115c <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	021a      	lsls	r2, r3, #8
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	430a      	orrs	r2, r1
 8000cc0:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2120      	movs	r1, #32
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f000 fa85 	bl	80011de <QSPI_WaitFlagStateUntilTimeout>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8000cd8:	7bfb      	ldrb	r3, [r7, #15]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d135      	bne.n	8000d4a <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_QSPI_Init+0x10c>)
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	687a      	ldr	r2, [r7, #4]
 8000cea:	6852      	ldr	r2, [r2, #4]
 8000cec:	0611      	lsls	r1, r2, #24
 8000cee:	687a      	ldr	r2, [r7, #4]
 8000cf0:	68d2      	ldr	r2, [r2, #12]
 8000cf2:	4311      	orrs	r1, r2
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	69d2      	ldr	r2, [r2, #28]
 8000cf8:	4311      	orrs	r1, r2
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	6a12      	ldr	r2, [r2, #32]
 8000cfe:	4311      	orrs	r1, r2
 8000d00:	687a      	ldr	r2, [r7, #4]
 8000d02:	6812      	ldr	r2, [r2, #0]
 8000d04:	430b      	orrs	r3, r1
 8000d06:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	685a      	ldr	r2, [r3, #4]
 8000d0e:	4b14      	ldr	r3, [pc, #80]	; (8000d60 <HAL_QSPI_Init+0x110>)
 8000d10:	4013      	ands	r3, r2
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	6912      	ldr	r2, [r2, #16]
 8000d16:	0411      	lsls	r1, r2, #16
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6952      	ldr	r2, [r2, #20]
 8000d1c:	4311      	orrs	r1, r2
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	6992      	ldr	r2, [r2, #24]
 8000d22:	4311      	orrs	r1, r2
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	430b      	orrs	r3, r1
 8000d2a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f042 0201 	orr.w	r2, r2, #1
 8000d3a:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2201      	movs	r2, #1
 8000d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	00ffff2f 	.word	0x00ffff2f
 8000d60:	ffe0f8fe 	.word	0xffe0f8fe

08000d64 <HAL_QSPI_IRQHandler>:
  * @brief This function handles QSPI interrupt request.
  * @param hqspi QSPI handle
  * @retval None.
  */
void HAL_QSPI_IRQHandler(QSPI_HandleTypeDef *hqspi)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg;
  uint32_t flag = READ_REG(hqspi->Instance->SR);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	617b      	str	r3, [r7, #20]
  uint32_t itsource = READ_REG(hqspi->Instance->CR);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	613b      	str	r3, [r7, #16]

  /* QSPI Fifo Threshold interrupt occurred ----------------------------------*/
  if(((flag & QSPI_FLAG_FT)!= RESET) && ((itsource & QSPI_IT_FT)!= RESET))
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	f003 0304 	and.w	r3, r3, #4
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d060      	beq.n	8000e48 <HAL_QSPI_IRQHandler+0xe4>
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d05b      	beq.n	8000e48 <HAL_QSPI_IRQHandler+0xe4>
  {
    data_reg = &hqspi->Instance->DR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	3320      	adds	r3, #32
 8000d96:	60fb      	str	r3, [r7, #12]

    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b12      	cmp	r3, #18
 8000da2:	d123      	bne.n	8000dec <HAL_QSPI_IRQHandler+0x88>
    {
      /* Transmission process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8000da4:	e01a      	b.n	8000ddc <HAL_QSPI_IRQHandler+0x78>
      {
        if (hqspi->TxXferCount > 0)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00d      	beq.n	8000dca <HAL_QSPI_IRQHandler+0x66>
        {
          /* Fill the FIFO until it is full */
          *(__IO uint8_t *)data_reg = *hqspi->pTxBuffPtr++;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db2:	1c59      	adds	r1, r3, #1
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	6251      	str	r1, [r2, #36]	; 0x24
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	701a      	strb	r2, [r3, #0]
          hqspi->TxXferCount--;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc2:	1e5a      	subs	r2, r3, #1
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc8:	e008      	b.n	8000ddc <HAL_QSPI_IRQHandler+0x78>
        }
        else
        {
          /* No more data available for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000dd8:	601a      	str	r2, [r3, #0]
          break;
 8000dda:	e031      	b.n	8000e40 <HAL_QSPI_IRQHandler+0xdc>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	f003 0304 	and.w	r3, r3, #4
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d1dd      	bne.n	8000da6 <HAL_QSPI_IRQHandler+0x42>
 8000dea:	e029      	b.n	8000e40 <HAL_QSPI_IRQHandler+0xdc>
        }
      }
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b22      	cmp	r3, #34	; 0x22
 8000df6:	d123      	bne.n	8000e40 <HAL_QSPI_IRQHandler+0xdc>
    {
      /* Receiving Process */
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8000df8:	e01b      	b.n	8000e32 <HAL_QSPI_IRQHandler+0xce>
      {
        if (hqspi->RxXferCount > 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d00e      	beq.n	8000e20 <HAL_QSPI_IRQHandler+0xbc>
        {
          /* Read the FIFO until it is empty */
          *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	1c59      	adds	r1, r3, #1
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	6311      	str	r1, [r2, #48]	; 0x30
 8000e0c:	68fa      	ldr	r2, [r7, #12]
 8000e0e:	7812      	ldrb	r2, [r2, #0]
 8000e10:	b2d2      	uxtb	r2, r2
 8000e12:	701a      	strb	r2, [r3, #0]
          hqspi->RxXferCount--;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e1e:	e008      	b.n	8000e32 <HAL_QSPI_IRQHandler+0xce>
        }
        else
        {
          /* All data have been received for the transfer */
          /* Disable the QSPI FIFO Threshold Interrupt */
          __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_FT);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e2e:	601a      	str	r2, [r3, #0]
          break;
 8000e30:	e006      	b.n	8000e40 <HAL_QSPI_IRQHandler+0xdc>
      while(__HAL_QSPI_GET_FLAG(hqspi, QSPI_FLAG_FT) != 0)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	f003 0304 	and.w	r3, r3, #4
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d1dc      	bne.n	8000dfa <HAL_QSPI_IRQHandler+0x96>
    
    /* FIFO Threshold callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->FifoThresholdCallback(hqspi);
#else
    HAL_QSPI_FifoThresholdCallback(hqspi);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f000 f96d 	bl	8001120 <HAL_QSPI_FifoThresholdCallback>
 8000e46:	e132      	b.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
#endif
  }

  /* QSPI Transfer Complete interrupt occurred -------------------------------*/
  else if(((flag & QSPI_FLAG_TC)!= RESET) && ((itsource & QSPI_IT_TC)!= RESET))
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f000 80a6 	beq.w	8000fa0 <HAL_QSPI_IRQHandler+0x23c>
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80a0 	beq.w	8000fa0 <HAL_QSPI_IRQHandler+0x23c>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TC);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2202      	movs	r2, #2
 8000e66:	60da      	str	r2, [r3, #12]

    /* Disable the QSPI FIFO Threshold, Transfer Error and Transfer complete Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8000e76:	601a      	str	r2, [r3, #0]
    
    /* Transfer complete callback */
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	2b12      	cmp	r3, #18
 8000e82:	d120      	bne.n	8000ec6 <HAL_QSPI_IRQHandler+0x162>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d011      	beq.n	8000eb6 <HAL_QSPI_IRQHandler+0x152>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0204 	bic.w	r2, r2, #4
 8000ea0:	601a      	str	r2, [r3, #0]
        
        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0201 	bic.w	r2, r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
/* Clear Busy bit */
      HAL_QSPI_Abort_IT(hqspi);
#endif
      
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* TX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->TxCpltCallback(hqspi);
#else
      HAL_QSPI_TxCpltCallback(hqspi);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f924 	bl	800110c <HAL_QSPI_TxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000ec4:	e0f0      	b.n	80010a8 <HAL_QSPI_IRQHandler+0x344>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_RX)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b22      	cmp	r3, #34	; 0x22
 8000ed0:	d141      	bne.n	8000f56 <HAL_QSPI_IRQHandler+0x1f2>
    {
      if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <HAL_QSPI_IRQHandler+0x1a2>
      {
        /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
        CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f022 0204 	bic.w	r2, r2, #4
 8000eee:	601a      	str	r2, [r3, #0]
        
        /* Disable the DMA channel */
        __HAL_DMA_DISABLE(hqspi->hdma);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	e01f      	b.n	8000f46 <HAL_QSPI_IRQHandler+0x1e2>
      }
      else
      {
        data_reg = &hqspi->Instance->DR;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3320      	adds	r3, #32
 8000f0c:	60fb      	str	r3, [r7, #12]
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0)
 8000f0e:	e011      	b.n	8000f34 <HAL_QSPI_IRQHandler+0x1d0>
        {
          if (hqspi->RxXferCount > 0)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d015      	beq.n	8000f44 <HAL_QSPI_IRQHandler+0x1e0>
          {
            /* Read the last data received in the FIFO until it is empty */
            *hqspi->pRxBuffPtr++ = *(__IO uint8_t *)data_reg;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1c:	1c59      	adds	r1, r3, #1
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6311      	str	r1, [r2, #48]	; 0x30
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	7812      	ldrb	r2, [r2, #0]
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	701a      	strb	r2, [r3, #0]
            hqspi->RxXferCount--;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f2e:	1e5a      	subs	r2, r3, #1
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	639a      	str	r2, [r3, #56]	; 0x38
        while(READ_BIT(hqspi->Instance->SR, QUADSPI_SR_FLEVEL) != 0)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	689b      	ldr	r3, [r3, #8]
 8000f3a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d1e6      	bne.n	8000f10 <HAL_QSPI_IRQHandler+0x1ac>
 8000f42:	e000      	b.n	8000f46 <HAL_QSPI_IRQHandler+0x1e2>
          }
          else
          {
            /* All data have been received for the transfer */
            break;
 8000f44:	bf00      	nop
      /* Workaround - Extra data written in the FIFO at the end of a read transfer */
      HAL_QSPI_Abort_IT(hqspi);
#endif /* QSPI_V1_0*/      
      
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* RX Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->RxCpltCallback(hqspi);
#else
      HAL_QSPI_RxCpltCallback(hqspi);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f000 f8d2 	bl	80010f8 <HAL_QSPI_RxCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000f54:	e0a8      	b.n	80010a8 <HAL_QSPI_IRQHandler+0x344>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_BUSY)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d107      	bne.n	8000f72 <HAL_QSPI_IRQHandler+0x20e>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Command Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->CmdCpltCallback(hqspi);
#else
      HAL_QSPI_CmdCpltCallback(hqspi);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f8ba 	bl	80010e4 <HAL_QSPI_CmdCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000f70:	e09a      	b.n	80010a8 <HAL_QSPI_IRQHandler+0x344>
#endif
    }
    else if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b08      	cmp	r3, #8
 8000f7c:	f040 8094 	bne.w	80010a8 <HAL_QSPI_IRQHandler+0x344>
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      if (hqspi->ErrorCode == HAL_QSPI_ERROR_NONE)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d103      	bne.n	8000f98 <HAL_QSPI_IRQHandler+0x234>

        /* Abort Complete callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->AbortCpltCallback(hqspi);
#else
        HAL_QSPI_AbortCpltCallback(hqspi);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f000 f89d 	bl	80010d0 <HAL_QSPI_AbortCpltCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000f96:	e087      	b.n	80010a8 <HAL_QSPI_IRQHandler+0x344>

        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f000 f88f 	bl	80010bc <HAL_QSPI_ErrorCallback>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 8000f9e:	e083      	b.n	80010a8 <HAL_QSPI_IRQHandler+0x344>
      }
    }
  }

  /* QSPI Status Match interrupt occurred ------------------------------------*/
  else if(((flag & QSPI_FLAG_SM)!= RESET) && ((itsource & QSPI_IT_SM)!= RESET))
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d01f      	beq.n	8000fea <HAL_QSPI_IRQHandler+0x286>
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d01a      	beq.n	8000fea <HAL_QSPI_IRQHandler+0x286>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_SM);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2208      	movs	r2, #8
 8000fba:	60da      	str	r2, [r3, #12]
   
    /* Check if the automatic poll mode stop is activated */
    if(READ_BIT(hqspi->Instance->CR, QUADSPI_CR_APMS) != 0)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d00b      	beq.n	8000fe2 <HAL_QSPI_IRQHandler+0x27e>
    {
      /* Disable the QSPI Transfer Error and Status Match Interrupts */
      __HAL_QSPI_DISABLE_IT(hqspi, (QSPI_IT_SM | QSPI_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8000fd8:	601a      	str	r2, [r3, #0]

      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Status match callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->StatusMatchCallback(hqspi);
#else
    HAL_QSPI_StatusMatchCallback(hqspi);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f8a6 	bl	8001134 <HAL_QSPI_StatusMatchCallback>
 8000fe8:	e061      	b.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
#endif
  }

  /* QSPI Transfer Error interrupt occurred ----------------------------------*/
  else if(((flag & QSPI_FLAG_TE)!= RESET) && ((itsource & QSPI_IT_TE)!= RESET))
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d047      	beq.n	8001084 <HAL_QSPI_IRQHandler+0x320>
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d042      	beq.n	8001084 <HAL_QSPI_IRQHandler+0x320>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TE);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2201      	movs	r2, #1
 8001004:	60da      	str	r2, [r3, #12]
    
    /* Disable all the QSPI Interrupts */
    __HAL_QSPI_DISABLE_IT(hqspi, QSPI_IT_SM | QSPI_IT_TC | QSPI_IT_TE | QSPI_IT_FT);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001014:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hqspi->ErrorCode |= HAL_QSPI_ERROR_TRANSFER;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f043 0202 	orr.w	r2, r3, #2
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	645a      	str	r2, [r3, #68]	; 0x44
    
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	2b00      	cmp	r3, #0
 800102e:	d021      	beq.n	8001074 <HAL_QSPI_IRQHandler+0x310>
    {
      /* Disable the DMA transfer by clearing the DMAEN bit in the QSPI CR register */
      CLEAR_BIT(hqspi->Instance->CR, QUADSPI_CR_DMAEN);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0204 	bic.w	r2, r2, #4
 800103e:	601a      	str	r2, [r3, #0]
      
      /* Disable the DMA channel */
      hqspi->hdma->XferAbortCallback = QSPI_DMAAbortCplt;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	4a1c      	ldr	r2, [pc, #112]	; (80010b8 <HAL_QSPI_IRQHandler+0x354>)
 8001046:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort_IT(hqspi->hdma) != HAL_OK)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fbe2 	bl	8000816 <HAL_DMA_Abort_IT>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d029      	beq.n	80010ac <HAL_QSPI_IRQHandler+0x348>
      {
        /* Set error code to DMA */
        hqspi->ErrorCode |= HAL_QSPI_ERROR_DMA;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105c:	f043 0204 	orr.w	r2, r3, #4
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	645a      	str	r2, [r3, #68]	; 0x44

        /* Change state of QSPI */
        hqspi->State = HAL_QSPI_STATE_READY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2201      	movs	r2, #1
 8001068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        
        /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
        hqspi->ErrorCallback(hqspi);
#else
        HAL_QSPI_ErrorCallback(hqspi);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f000 f825 	bl	80010bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001072:	e01b      	b.n	80010ac <HAL_QSPI_IRQHandler+0x348>
      }
    }
    else
    {
      /* Change state of QSPI */
      hqspi->State = HAL_QSPI_STATE_READY;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2201      	movs	r2, #1
 8001078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      
      /* Error callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
      hqspi->ErrorCallback(hqspi);
#else
      HAL_QSPI_ErrorCallback(hqspi);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f81d 	bl	80010bc <HAL_QSPI_ErrorCallback>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 8001082:	e013      	b.n	80010ac <HAL_QSPI_IRQHandler+0x348>
#endif
    }
  }

  /* QSPI Timeout interrupt occurred -----------------------------------------*/
  else if(((flag & QSPI_FLAG_TO)!= RESET) && ((itsource & QSPI_IT_TO)!= RESET))
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f003 0310 	and.w	r3, r3, #16
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00f      	beq.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00a      	beq.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
  {
    /* Clear interrupt */
    WRITE_REG(hqspi->Instance->FCR, QSPI_FLAG_TO);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2210      	movs	r2, #16
 800109e:	60da      	str	r2, [r3, #12]
    
    /* Time out callback */
#if (USE_HAL_QSPI_REGISTER_CALLBACKS == 1)
    hqspi->TimeOutCallback(hqspi);
#else
    HAL_QSPI_TimeOutCallback(hqspi);
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f000 f851 	bl	8001148 <HAL_QSPI_TimeOutCallback>
#endif
  }
}
 80010a6:	e002      	b.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
    if(hqspi->State == HAL_QSPI_STATE_BUSY_INDIRECT_TX)
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <HAL_QSPI_IRQHandler+0x34a>
    if ((hqspi->Instance->CR & QUADSPI_CR_DMAEN)!= RESET)
 80010ac:	bf00      	nop
}
 80010ae:	bf00      	nop
 80010b0:	3718      	adds	r7, #24
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	08001179 	.word	0x08001179

080010bc <HAL_QSPI_ErrorCallback>:
  * @brief  Transfer Error callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_ErrorCallback(QSPI_HandleTypeDef *hqspi)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_ErrorCallback could be implemented in the user file
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_QSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_AbortCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_QSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <HAL_QSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_CmdCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_CmdCpltCallback could be implemented in the user file
   */
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <HAL_QSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_RxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_RxCpltCallback could be implemented in the user file
   */
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <HAL_QSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hqspi QSPI handle
  * @retval None
  */
 __weak void HAL_QSPI_TxCpltCallback(QSPI_HandleTypeDef *hqspi)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_QSPI_TxCpltCallback could be implemented in the user file
   */ 
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <HAL_QSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_FifoThresholdCallback(QSPI_HandleTypeDef *hqspi)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr

08001134 <HAL_QSPI_StatusMatchCallback>:
  * @brief  Status Match callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_StatusMatchCallback(QSPI_HandleTypeDef *hqspi)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
    
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_StatusMatchCallback could be implemented in the user file
   */
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_QSPI_TimeOutCallback>:
  * @brief  Timeout callbacks
  * @param  hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_TimeOutCallback(QSPI_HandleTypeDef *hqspi)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);
  
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_QSPI_TimeOutCallback could be implemented in the user file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <QSPI_DMAAbortCplt>:
  * @brief  DMA QSPI abort complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void QSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)   
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  QSPI_HandleTypeDef* hqspi = ( QSPI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001184:	60fb      	str	r3, [r7, #12]

  hqspi->RxXferCount = 0;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2200      	movs	r2, #0
 800118a:	639a      	str	r2, [r3, #56]	; 0x38
  hqspi->TxXferCount = 0;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	62da      	str	r2, [r3, #44]	; 0x2c

  if(hqspi->State == HAL_QSPI_STATE_ABORT)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b08      	cmp	r3, #8
 800119c:	d114      	bne.n	80011c8 <QSPI_DMAAbortCplt+0x50>
  {
    /* DMA Abort called by QSPI abort */
    /* Clear interrupt */
    __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	60da      	str	r2, [r3, #12]
    
    /* Enable the QSPI Transfer Complete Interrupt */
    __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TC);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Configure QSPI: CR register with Abort request */
    SET_BIT(hqspi->Instance->CR, QUADSPI_CR_ABORT);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f042 0202 	orr.w	r2, r2, #2
 80011c4:	601a      	str	r2, [r3, #0]
    hqspi->ErrorCallback(hqspi);
#else
    HAL_QSPI_ErrorCallback(hqspi);
#endif
  }
}
 80011c6:	e006      	b.n	80011d6 <QSPI_DMAAbortCplt+0x5e>
    hqspi->State = HAL_QSPI_STATE_READY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2201      	movs	r2, #1
 80011cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    HAL_QSPI_ErrorCallback(hqspi);
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff ff73 	bl	80010bc <HAL_QSPI_ErrorCallback>
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	603b      	str	r3, [r7, #0]
 80011ea:	4613      	mov	r3, r2
 80011ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80011ee:	e01a      	b.n	8001226 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f6:	d016      	beq.n	8001226 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d007      	beq.n	800120e <QSPI_WaitFlagStateUntilTimeout+0x30>
 80011fe:	f7ff f9ed 	bl	80005dc <HAL_GetTick>
 8001202:	4602      	mov	r2, r0
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	429a      	cmp	r2, r3
 800120c:	d20b      	bcs.n	8001226 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	2204      	movs	r2, #4
 8001212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	f043 0201 	orr.w	r2, r3, #1
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e00e      	b.n	8001244 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	4013      	ands	r3, r2
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	b2db      	uxtb	r3, r3
 800123a:	461a      	mov	r2, r3
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	429a      	cmp	r2, r3
 8001240:	d1d6      	bne.n	80011f0 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001254:	2300      	movs	r3, #0
 8001256:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d101      	bne.n	8001262 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e25e      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8087 	beq.w	800137e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001270:	4b96      	ldr	r3, [pc, #600]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b04      	cmp	r3, #4
 800127a:	d00c      	beq.n	8001296 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127c:	4b93      	ldr	r3, [pc, #588]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f003 030c 	and.w	r3, r3, #12
 8001284:	2b08      	cmp	r3, #8
 8001286:	d112      	bne.n	80012ae <HAL_RCC_OscConfig+0x62>
 8001288:	4b90      	ldr	r3, [pc, #576]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001294:	d10b      	bne.n	80012ae <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001296:	4b8d      	ldr	r3, [pc, #564]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d06c      	beq.n	800137c <HAL_RCC_OscConfig+0x130>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d168      	bne.n	800137c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e238      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b6:	d106      	bne.n	80012c6 <HAL_RCC_OscConfig+0x7a>
 80012b8:	4b84      	ldr	r3, [pc, #528]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a83      	ldr	r2, [pc, #524]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	e02e      	b.n	8001324 <HAL_RCC_OscConfig+0xd8>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d10c      	bne.n	80012e8 <HAL_RCC_OscConfig+0x9c>
 80012ce:	4b7f      	ldr	r3, [pc, #508]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a7e      	ldr	r2, [pc, #504]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	4b7c      	ldr	r3, [pc, #496]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a7b      	ldr	r2, [pc, #492]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	e01d      	b.n	8001324 <HAL_RCC_OscConfig+0xd8>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0xc0>
 80012f2:	4b76      	ldr	r3, [pc, #472]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80012f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b73      	ldr	r3, [pc, #460]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a72      	ldr	r2, [pc, #456]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e00b      	b.n	8001324 <HAL_RCC_OscConfig+0xd8>
 800130c:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a6e      	ldr	r2, [pc, #440]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a6b      	ldr	r2, [pc, #428]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800131e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff f956 	bl	80005dc <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff f952 	bl	80005dc <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1ec      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b61      	ldr	r3, [pc, #388]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e014      	b.n	800137e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff f942 	bl	80005dc <HAL_GetTick>
 8001358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800135c:	f7ff f93e 	bl	80005dc <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b64      	cmp	r3, #100	; 0x64
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e1d8      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	4b57      	ldr	r3, [pc, #348]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d1f0      	bne.n	800135c <HAL_RCC_OscConfig+0x110>
 800137a:	e000      	b.n	800137e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d069      	beq.n	800145e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00b      	beq.n	80013ae <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001396:	4b4d      	ldr	r3, [pc, #308]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 030c 	and.w	r3, r3, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11c      	bne.n	80013dc <HAL_RCC_OscConfig+0x190>
 80013a2:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d116      	bne.n	80013dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ae:	4b47      	ldr	r3, [pc, #284]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d005      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17a>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d001      	beq.n	80013c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e1ac      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c6:	4b41      	ldr	r3, [pc, #260]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	493d      	ldr	r1, [pc, #244]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013da:	e040      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d023      	beq.n	800142c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013e4:	4b39      	ldr	r3, [pc, #228]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a38      	ldr	r2, [pc, #224]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff f8f4 	bl	80005dc <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff f8f0 	bl	80005dc <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e18a      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d0f0      	beq.n	80013f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	691b      	ldr	r3, [r3, #16]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4929      	ldr	r1, [pc, #164]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	e018      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800142c:	4b27      	ldr	r3, [pc, #156]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a26      	ldr	r2, [pc, #152]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff f8d0 	bl	80005dc <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff f8cc 	bl	80005dc <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e166      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	2b00      	cmp	r3, #0
 8001468:	d038      	beq.n	80014dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d019      	beq.n	80014a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147e:	f7ff f8ad 	bl	80005dc <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001486:	f7ff f8a9 	bl	80005dc <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e143      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x23a>
 80014a4:	e01a      	b.n	80014dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80014a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014aa:	4a08      	ldr	r2, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x280>)
 80014ac:	f023 0301 	bic.w	r3, r3, #1
 80014b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff f893 	bl	80005dc <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff f88f 	bl	80005dc <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d903      	bls.n	80014d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e129      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
 80014cc:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d0:	4b95      	ldr	r3, [pc, #596]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80014d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80a4 	beq.w	8001632 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ea:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d10d      	bne.n	8001512 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80014f6:	4b8c      	ldr	r3, [pc, #560]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	4a8b      	ldr	r2, [pc, #556]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80014fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001500:	6413      	str	r3, [r2, #64]	; 0x40
 8001502:	4b89      	ldr	r3, [pc, #548]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800150e:	2301      	movs	r3, #1
 8001510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001512:	4b86      	ldr	r3, [pc, #536]	; (800172c <HAL_RCC_OscConfig+0x4e0>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	2b00      	cmp	r3, #0
 800151c:	d118      	bne.n	8001550 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800151e:	4b83      	ldr	r3, [pc, #524]	; (800172c <HAL_RCC_OscConfig+0x4e0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a82      	ldr	r2, [pc, #520]	; (800172c <HAL_RCC_OscConfig+0x4e0>)
 8001524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800152a:	f7ff f857 	bl	80005dc <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001530:	e008      	b.n	8001544 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001532:	f7ff f853 	bl	80005dc <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b64      	cmp	r3, #100	; 0x64
 800153e:	d901      	bls.n	8001544 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e0ed      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <HAL_RCC_OscConfig+0x4e0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0f0      	beq.n	8001532 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d106      	bne.n	8001566 <HAL_RCC_OscConfig+0x31a>
 8001558:	4b73      	ldr	r3, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a72      	ldr	r2, [pc, #456]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	e02d      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10c      	bne.n	8001588 <HAL_RCC_OscConfig+0x33c>
 800156e:	4b6e      	ldr	r3, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001572:	4a6d      	ldr	r2, [pc, #436]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001574:	f023 0301 	bic.w	r3, r3, #1
 8001578:	6713      	str	r3, [r2, #112]	; 0x70
 800157a:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800157e:	4a6a      	ldr	r2, [pc, #424]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001580:	f023 0304 	bic.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	; 0x70
 8001586:	e01c      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	2b05      	cmp	r3, #5
 800158e:	d10c      	bne.n	80015aa <HAL_RCC_OscConfig+0x35e>
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	4a64      	ldr	r2, [pc, #400]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001596:	f043 0304 	orr.w	r3, r3, #4
 800159a:	6713      	str	r3, [r2, #112]	; 0x70
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800159e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015a2:	f043 0301 	orr.w	r3, r3, #1
 80015a6:	6713      	str	r3, [r2, #112]	; 0x70
 80015a8:	e00b      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
 80015aa:	4b5f      	ldr	r3, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	4a5e      	ldr	r2, [pc, #376]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015b0:	f023 0301 	bic.w	r3, r3, #1
 80015b4:	6713      	str	r3, [r2, #112]	; 0x70
 80015b6:	4b5c      	ldr	r3, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ba:	4a5b      	ldr	r2, [pc, #364]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015bc:	f023 0304 	bic.w	r3, r3, #4
 80015c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d015      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ca:	f7ff f807 	bl	80005dc <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff f803 	bl	80005dc <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e09b      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	4b4f      	ldr	r3, [pc, #316]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80015ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0ee      	beq.n	80015d2 <HAL_RCC_OscConfig+0x386>
 80015f4:	e014      	b.n	8001620 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7fe fff1 	bl	80005dc <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7fe ffed 	bl	80005dc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e085      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b44      	ldr	r3, [pc, #272]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001620:	7dfb      	ldrb	r3, [r7, #23]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d105      	bne.n	8001632 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001626:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a3f      	ldr	r2, [pc, #252]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800162c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d071      	beq.n	800171e <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800163a:	4b3b      	ldr	r3, [pc, #236]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b08      	cmp	r3, #8
 8001644:	d069      	beq.n	800171a <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b02      	cmp	r3, #2
 800164c:	d14b      	bne.n	80016e6 <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b36      	ldr	r3, [pc, #216]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a35      	ldr	r2, [pc, #212]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800165a:	f7fe ffbf 	bl	80005dc <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7fe ffbb 	bl	80005dc <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e055      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001674:	4b2c      	ldr	r3, [pc, #176]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1f0      	bne.n	8001662 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69da      	ldr	r2, [r3, #28]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	431a      	orrs	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168e:	019b      	lsls	r3, r3, #6
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	041b      	lsls	r3, r3, #16
 800169c:	431a      	orrs	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	061b      	lsls	r3, r3, #24
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	071b      	lsls	r3, r3, #28
 80016ac:	491e      	ldr	r1, [pc, #120]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b2:	4b1d      	ldr	r3, [pc, #116]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1c      	ldr	r2, [pc, #112]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016be:	f7fe ff8d 	bl	80005dc <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c6:	f7fe ff89 	bl	80005dc <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e023      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0f0      	beq.n	80016c6 <HAL_RCC_OscConfig+0x47a>
 80016e4:	e01b      	b.n	800171e <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 80016ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f2:	f7fe ff73 	bl	80005dc <HAL_GetTick>
 80016f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016f8:	e008      	b.n	800170c <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fa:	f7fe ff6f 	bl	80005dc <HAL_GetTick>
 80016fe:	4602      	mov	r2, r0
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	1ad3      	subs	r3, r2, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d901      	bls.n	800170c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e009      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_RCC_OscConfig+0x4dc>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d1f0      	bne.n	80016fa <HAL_RCC_OscConfig+0x4ae>
 8001718:	e001      	b.n	800171e <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0ce      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b69      	ldr	r3, [pc, #420]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d910      	bls.n	8001778 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 020f 	bic.w	r2, r3, #15
 800175e:	4964      	ldr	r1, [pc, #400]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b62      	ldr	r3, [pc, #392]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b6      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a57      	ldr	r2, [pc, #348]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b52      	ldr	r3, [pc, #328]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a51      	ldr	r2, [pc, #324]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b4f      	ldr	r3, [pc, #316]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494c      	ldr	r1, [pc, #304]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d040      	beq.n	8001854 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d115      	bne.n	8001812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07d      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e071      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e069      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b38      	ldr	r3, [pc, #224]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4935      	ldr	r1, [pc, #212]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001824:	f7fe feda 	bl	80005dc <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7fe fed6 	bl	80005dc <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e051      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2c      	ldr	r3, [pc, #176]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b26      	ldr	r3, [pc, #152]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d210      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 020f 	bic.w	r2, r3, #15
 800186a:	4921      	ldr	r1, [pc, #132]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 030f 	and.w	r3, r3, #15
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e030      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b18      	ldr	r3, [pc, #96]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4915      	ldr	r1, [pc, #84]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490d      	ldr	r1, [pc, #52]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f81d 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018c6:	4601      	mov	r1, r0
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	fa21 f303 	lsr.w	r3, r1, r3
 80018da:	4a08      	ldr	r2, [pc, #32]	; (80018fc <HAL_RCC_ClockConfig+0x1cc>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7fe fe38 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08001f84 	.word	0x08001f84
 80018fc:	20000008 	.word	0x20000008

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	2300      	movs	r3, #0
 800190c:	60fb      	str	r3, [r7, #12]
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001916:	4b50      	ldr	r3, [pc, #320]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d007      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x32>
 8001922:	2b08      	cmp	r3, #8
 8001924:	d008      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x38>
 8001926:	2b00      	cmp	r3, #0
 8001928:	f040 808d 	bne.w	8001a46 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x15c>)
 800192e:	60bb      	str	r3, [r7, #8]
       break;
 8001930:	e08c      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001932:	4b4b      	ldr	r3, [pc, #300]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001934:	60bb      	str	r3, [r7, #8]
      break;
 8001936:	e089      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001940:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001942:	4b45      	ldr	r3, [pc, #276]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d023      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194e:	4b42      	ldr	r3, [pc, #264]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	099b      	lsrs	r3, r3, #6
 8001954:	f04f 0400 	mov.w	r4, #0
 8001958:	f240 11ff 	movw	r1, #511	; 0x1ff
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	ea03 0501 	and.w	r5, r3, r1
 8001964:	ea04 0602 	and.w	r6, r4, r2
 8001968:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x160>)
 800196a:	fb02 f106 	mul.w	r1, r2, r6
 800196e:	2200      	movs	r2, #0
 8001970:	fb02 f205 	mul.w	r2, r2, r5
 8001974:	440a      	add	r2, r1
 8001976:	493a      	ldr	r1, [pc, #232]	; (8001a60 <HAL_RCC_GetSysClockFreq+0x160>)
 8001978:	fba5 0101 	umull	r0, r1, r5, r1
 800197c:	1853      	adds	r3, r2, r1
 800197e:	4619      	mov	r1, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f04f 0400 	mov.w	r4, #0
 8001986:	461a      	mov	r2, r3
 8001988:	4623      	mov	r3, r4
 800198a:	f7fe fc55 	bl	8000238 <__aeabi_uldivmod>
 800198e:	4603      	mov	r3, r0
 8001990:	460c      	mov	r4, r1
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	e049      	b.n	8001a2a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	099b      	lsrs	r3, r3, #6
 800199c:	f04f 0400 	mov.w	r4, #0
 80019a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	ea03 0501 	and.w	r5, r3, r1
 80019ac:	ea04 0602 	and.w	r6, r4, r2
 80019b0:	4629      	mov	r1, r5
 80019b2:	4632      	mov	r2, r6
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	f04f 0400 	mov.w	r4, #0
 80019bc:	0154      	lsls	r4, r2, #5
 80019be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80019c2:	014b      	lsls	r3, r1, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	4622      	mov	r2, r4
 80019c8:	1b49      	subs	r1, r1, r5
 80019ca:	eb62 0206 	sbc.w	r2, r2, r6
 80019ce:	f04f 0300 	mov.w	r3, #0
 80019d2:	f04f 0400 	mov.w	r4, #0
 80019d6:	0194      	lsls	r4, r2, #6
 80019d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80019dc:	018b      	lsls	r3, r1, #6
 80019de:	1a5b      	subs	r3, r3, r1
 80019e0:	eb64 0402 	sbc.w	r4, r4, r2
 80019e4:	f04f 0100 	mov.w	r1, #0
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	00e2      	lsls	r2, r4, #3
 80019ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80019f2:	00d9      	lsls	r1, r3, #3
 80019f4:	460b      	mov	r3, r1
 80019f6:	4614      	mov	r4, r2
 80019f8:	195b      	adds	r3, r3, r5
 80019fa:	eb44 0406 	adc.w	r4, r4, r6
 80019fe:	f04f 0100 	mov.w	r1, #0
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	02a2      	lsls	r2, r4, #10
 8001a08:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001a0c:	0299      	lsls	r1, r3, #10
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4614      	mov	r4, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	4621      	mov	r1, r4
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f04f 0400 	mov.w	r4, #0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	f7fe fc0a 	bl	8000238 <__aeabi_uldivmod>
 8001a24:	4603      	mov	r3, r0
 8001a26:	460c      	mov	r4, r1
 8001a28:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x158>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	f003 0303 	and.w	r3, r3, #3
 8001a34:	3301      	adds	r3, #1
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a42:	60bb      	str	r3, [r7, #8]
      break;
 8001a44:	e002      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001a48:	60bb      	str	r3, [r7, #8]
      break;
 8001a4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a4c:	68bb      	ldr	r3, [r7, #8]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	00f42400 	.word	0x00f42400
 8001a60:	017d7840 	.word	0x017d7840

08001a64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a20      	ldr	r2, [pc, #128]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	4b1b      	ldr	r3, [pc, #108]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a88:	f043 0302 	orr.w	r3, r3, #2
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a14      	ldr	r2, [pc, #80]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001ad0:	f043 0320 	orr.w	r3, r3, #32
 8001ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_GPIO_Init+0x8c>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	f003 0320 	and.w	r3, r3, #32
 8001ade:	607b      	str	r3, [r7, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]

}
 8001ae2:	bf00      	nop
 8001ae4:	371c      	adds	r7, #28
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800

08001af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001af8:	f7fe fd1e 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001afc:	f000 f806 	bl	8001b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b00:	f7ff ffb0 	bl	8001a64 <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8001b04:	f000 f876 	bl	8001bf4 <MX_QUADSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <main+0x14>
	...

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b094      	sub	sp, #80	; 0x50
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	2234      	movs	r2, #52	; 0x34
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fa1e 	bl	8001f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	f107 0308 	add.w	r3, r7, #8
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	4a29      	ldr	r2, [pc, #164]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b3c:	4b27      	ldr	r3, [pc, #156]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b48:	4b25      	ldr	r3, [pc, #148]	; (8001be0 <SystemClock_Config+0xd4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a24      	ldr	r2, [pc, #144]	; (8001be0 <SystemClock_Config+0xd4>)
 8001b4e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <SystemClock_Config+0xd4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b5c:	603b      	str	r3, [r7, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b60:	2302      	movs	r3, #2
 8001b62:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b68:	2310      	movs	r3, #16
 8001b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b70:	2300      	movs	r3, #0
 8001b72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b74:	2308      	movs	r3, #8
 8001b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001b78:	23d8      	movs	r3, #216	; 0xd8
 8001b7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001b80:	2302      	movs	r3, #2
 8001b82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fb5f 	bl	800124c <HAL_RCC_OscConfig>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001b94:	f000 f826 	bl	8001be4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001b98:	f7ff f80a 	bl	8000bb0 <HAL_PWREx_EnableOverDrive>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001ba2:	f000 f81f 	bl	8001be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba6:	230f      	movs	r3, #15
 8001ba8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001baa:	2302      	movs	r3, #2
 8001bac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	2107      	movs	r1, #7
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fdb3 	bl	8001730 <HAL_RCC_ClockConfig>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001bd0:	f000 f808 	bl	8001be4 <Error_Handler>
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3750      	adds	r7, #80	; 0x50
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000

08001be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0

  hqspi.Instance = QUADSPI;
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <MX_QUADSPI_Init+0x54>)
 8001bfc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001bfe:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c00:	2202      	movs	r2, #2
 8001c02:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8001c0a:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 25;
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c12:	2219      	movs	r2, #25
 8001c14:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001c1c:	4b09      	ldr	r3, [pc, #36]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001c22:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001c28:	4b06      	ldr	r3, [pc, #24]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_QUADSPI_Init+0x50>)
 8001c30:	f7ff f80e 	bl	8000c50 <HAL_QSPI_Init>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8001c3a:	f7ff ffd3 	bl	8001be4 <Error_Handler>
  }

}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	2000002c 	.word	0x2000002c
 8001c48:	a0001000 	.word	0xa0001000

08001c4c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08c      	sub	sp, #48	; 0x30
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a46      	ldr	r2, [pc, #280]	; (8001d84 <HAL_QSPI_MspInit+0x138>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	f040 8086 	bne.w	8001d7c <HAL_QSPI_MspInit+0x130>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	4a44      	ldr	r2, [pc, #272]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c76:	f043 0302 	orr.w	r3, r3, #2
 8001c7a:	6393      	str	r3, [r2, #56]	; 0x38
 8001c7c:	4b42      	ldr	r3, [pc, #264]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c88:	4b3f      	ldr	r3, [pc, #252]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4a3e      	ldr	r2, [pc, #248]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c8e:	f043 0310 	orr.w	r3, r3, #16
 8001c92:	6313      	str	r3, [r2, #48]	; 0x30
 8001c94:	4b3c      	ldr	r3, [pc, #240]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b39      	ldr	r3, [pc, #228]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca4:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001ca6:	f043 0302 	orr.w	r3, r3, #2
 8001caa:	6313      	str	r3, [r2, #48]	; 0x30
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cbe:	f043 0304 	orr.w	r3, r3, #4
 8001cc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd0:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cd6:	f043 0320 	orr.w	r3, r3, #32
 8001cda:	6313      	str	r3, [r2, #48]	; 0x30
 8001cdc:	4b2a      	ldr	r3, [pc, #168]	; (8001d88 <HAL_QSPI_MspInit+0x13c>)
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> QUADSPI_BK1_IO1
    PC9     ------> QUADSPI_BK1_IO0
    PF6     ------> QUADSPI_BK1_IO3
    PF10     ------> QUADSPI_CLK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001cf8:	2309      	movs	r3, #9
 8001cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4822      	ldr	r0, [pc, #136]	; (8001d8c <HAL_QSPI_MspInit+0x140>)
 8001d04:	f7fe fdaa 	bl	800085c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d08:	2340      	movs	r3, #64	; 0x40
 8001d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d18:	230a      	movs	r3, #10
 8001d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	4619      	mov	r1, r3
 8001d22:	481b      	ldr	r0, [pc, #108]	; (8001d90 <HAL_QSPI_MspInit+0x144>)
 8001d24:	f7fe fd9a 	bl	800085c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001d28:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d3a:	2309      	movs	r3, #9
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4813      	ldr	r0, [pc, #76]	; (8001d94 <HAL_QSPI_MspInit+0x148>)
 8001d46:	f7fe fd89 	bl	800085c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10;
 8001d4a:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	4619      	mov	r1, r3
 8001d66:	480c      	ldr	r0, [pc, #48]	; (8001d98 <HAL_QSPI_MspInit+0x14c>)
 8001d68:	f7fe fd78 	bl	800085c <HAL_GPIO_Init>

    /* QUADSPI interrupt Init */
    HAL_NVIC_SetPriority(QUADSPI_IRQn, 0, 0);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	2100      	movs	r1, #0
 8001d70:	205c      	movs	r0, #92	; 0x5c
 8001d72:	f7fe fd1a 	bl	80007aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8001d76:	205c      	movs	r0, #92	; 0x5c
 8001d78:	f7fe fd33 	bl	80007e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001d7c:	bf00      	nop
 8001d7e:	3730      	adds	r7, #48	; 0x30
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	a0001000 	.word	0xa0001000
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40021400 	.word	0x40021400

08001d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x44>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x44>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	6413      	str	r3, [r2, #64]	; 0x40
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x44>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <HAL_MspInit+0x44>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a08      	ldr	r2, [pc, #32]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_MspInit+0x44>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	603b      	str	r3, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40023800 	.word	0x40023800

08001de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <HardFault_Handler+0x4>

08001df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <MemManage_Handler+0x4>

08001dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e02:	e7fe      	b.n	8001e02 <BusFault_Handler+0x4>

08001e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler+0x4>

08001e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e38:	f7fe fbbc 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN QUADSPI_IRQn 0 */

  /* USER CODE END QUADSPI_IRQn 0 */
  HAL_QSPI_IRQHandler(&hqspi);
 8001e44:	4802      	ldr	r0, [pc, #8]	; (8001e50 <QUADSPI_IRQHandler+0x10>)
 8001e46:	f7fe ff8d 	bl	8000d64 <HAL_QSPI_IRQHandler>
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000002c 	.word	0x2000002c

08001e54 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <SystemInit+0x5c>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a14      	ldr	r2, [pc, #80]	; (8001eb0 <SystemInit+0x5c>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e68:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <SystemInit+0x60>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <SystemInit+0x60>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e74:	4b0f      	ldr	r3, [pc, #60]	; (8001eb4 <SystemInit+0x60>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <SystemInit+0x60>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	490d      	ldr	r1, [pc, #52]	; (8001eb4 <SystemInit+0x60>)
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <SystemInit+0x64>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <SystemInit+0x60>)
 8001e88:	4a0c      	ldr	r2, [pc, #48]	; (8001ebc <SystemInit+0x68>)
 8001e8a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e8c:	4b09      	ldr	r3, [pc, #36]	; (8001eb4 <SystemInit+0x60>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a08      	ldr	r2, [pc, #32]	; (8001eb4 <SystemInit+0x60>)
 8001e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e96:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <SystemInit+0x60>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SystemInit+0x5c>)
 8001ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea4:	609a      	str	r2, [r3, #8]
#endif
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	fef6ffff 	.word	0xfef6ffff
 8001ebc:	24003010 	.word	0x24003010

08001ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ec6:	e003      	b.n	8001ed0 <LoopCopyDataInit>

08001ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ec8:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ece:	3104      	adds	r1, #4

08001ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ed0:	480b      	ldr	r0, [pc, #44]	; (8001f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ed8:	d3f6      	bcc.n	8001ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eda:	4a0b      	ldr	r2, [pc, #44]	; (8001f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001edc:	e002      	b.n	8001ee4 <LoopFillZerobss>

08001ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ee0:	f842 3b04 	str.w	r3, [r2], #4

08001ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ee8:	d3f9      	bcc.n	8001ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eea:	f7ff ffb3 	bl	8001e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eee:	f000 f811 	bl	8001f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef2:	f7ff fdff 	bl	8001af4 <main>
  bx  lr    
 8001ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001efc:	08001fa4 	.word	0x08001fa4
  ldr  r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f04:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001f08:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001f0c:	20000078 	.word	0x20000078

08001f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f10:	e7fe      	b.n	8001f10 <ADC_IRQHandler>
	...

08001f14 <__libc_init_array>:
 8001f14:	b570      	push	{r4, r5, r6, lr}
 8001f16:	4e0d      	ldr	r6, [pc, #52]	; (8001f4c <__libc_init_array+0x38>)
 8001f18:	4c0d      	ldr	r4, [pc, #52]	; (8001f50 <__libc_init_array+0x3c>)
 8001f1a:	1ba4      	subs	r4, r4, r6
 8001f1c:	10a4      	asrs	r4, r4, #2
 8001f1e:	2500      	movs	r5, #0
 8001f20:	42a5      	cmp	r5, r4
 8001f22:	d109      	bne.n	8001f38 <__libc_init_array+0x24>
 8001f24:	4e0b      	ldr	r6, [pc, #44]	; (8001f54 <__libc_init_array+0x40>)
 8001f26:	4c0c      	ldr	r4, [pc, #48]	; (8001f58 <__libc_init_array+0x44>)
 8001f28:	f000 f820 	bl	8001f6c <_init>
 8001f2c:	1ba4      	subs	r4, r4, r6
 8001f2e:	10a4      	asrs	r4, r4, #2
 8001f30:	2500      	movs	r5, #0
 8001f32:	42a5      	cmp	r5, r4
 8001f34:	d105      	bne.n	8001f42 <__libc_init_array+0x2e>
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f3c:	4798      	blx	r3
 8001f3e:	3501      	adds	r5, #1
 8001f40:	e7ee      	b.n	8001f20 <__libc_init_array+0xc>
 8001f42:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f46:	4798      	blx	r3
 8001f48:	3501      	adds	r5, #1
 8001f4a:	e7f2      	b.n	8001f32 <__libc_init_array+0x1e>
 8001f4c:	08001f9c 	.word	0x08001f9c
 8001f50:	08001f9c 	.word	0x08001f9c
 8001f54:	08001f9c 	.word	0x08001f9c
 8001f58:	08001fa0 	.word	0x08001fa0

08001f5c <memset>:
 8001f5c:	4402      	add	r2, r0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d100      	bne.n	8001f66 <memset+0xa>
 8001f64:	4770      	bx	lr
 8001f66:	f803 1b01 	strb.w	r1, [r3], #1
 8001f6a:	e7f9      	b.n	8001f60 <memset+0x4>

08001f6c <_init>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr

08001f78 <_fini>:
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	bf00      	nop
 8001f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f7e:	bc08      	pop	{r3}
 8001f80:	469e      	mov	lr, r3
 8001f82:	4770      	bx	lr
